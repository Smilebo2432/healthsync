{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001';\n\n// Helper function for API calls\nconst apiCall = async (endpoint, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n\n  // Get authentication token from Supabase\n  let token = null;\n  try {\n    const authData = localStorage.getItem('sb-dswegujgkgcbszblpmcl-auth-token');\n    if (authData) {\n      const parsed = JSON.parse(authData);\n      token = parsed.access_token;\n    }\n  } catch (e) {\n    console.log('No auth token found');\n  }\n  const defaultOptions = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...(token && {\n        'Authorization': `Bearer ${token}`\n      })\n    },\n    ...options\n  };\n  try {\n    const response = await fetch(url, defaultOptions);\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`API Error (${endpoint}):`, error);\n    // Always throw the error instead of using mock data\n    throw error;\n  }\n};\n\n// Health check\nexport const checkHealth = async () => {\n  return apiCall('/health');\n};\n\n// Get all health data\nexport const getHealthData = async () => {\n  return apiCall('/health-data');\n};\n\n// Upload and analyze document\nexport const uploadDocument = async documentText => {\n  return apiCall('/upload', {\n    method: 'POST',\n    body: JSON.stringify({\n      text: documentText\n    })\n  });\n};\n\n// Send chat message\nexport const sendChatMessage = async message => {\n  return apiCall('/chat', {\n    method: 'POST',\n    body: JSON.stringify({\n      message\n    })\n  });\n};\n\n// Sync to calendar\nexport const syncCalendar = async () => {\n  return apiCall('/sync-calendar', {\n    method: 'POST'\n  });\n};\n\n// Get chat history\nexport const getChatHistory = async () => {\n  return apiCall('/chat-history');\n};\n\n// Get health insights\nexport const getHealthInsights = async () => {\n  return apiCall('/health-insights', {\n    method: 'POST'\n  });\n};\n\n// No mock data - always use real Gemini AI analysis\n\n// Mock API responses for development\nexport const mockApiCall = async (endpoint, options = {}) => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 500));\n  switch (endpoint) {\n    case '/health':\n      return {\n        status: 'healthy',\n        message: 'HealthSync AI is running!'\n      };\n    case '/health-data':\n      return getMockHealthData();\n    case '/upload':\n      const {\n        text\n      } = JSON.parse(options.body);\n      return {\n        message: 'Document analyzed successfully',\n        analysis: {\n          medications: [{\n            name: \"Sample Medication\",\n            dosage: \"100mg\",\n            frequency: \"once daily\",\n            duration: \"ongoing\",\n            instructions: \"Take as directed\",\n            refill_date: \"2024-09-30\"\n          }],\n          appointments: [],\n          health_metrics: [],\n          recommendations: [\"Follow up with your doctor\", \"Monitor symptoms\"]\n        },\n        document_id: Date.now()\n      };\n    case '/chat':\n      const {\n        message\n      } = JSON.parse(options.body);\n      return {\n        response: `This is a mock response to: \"${message}\". In the real application, this would be generated by Google Gemini AI based on your health profile.`,\n        chat_id: Date.now()\n      };\n    case '/sync-calendar':\n      return {\n        message: 'Calendar synced successfully',\n        events_created: 7,\n        calendar_result: {\n          success: true\n        }\n      };\n    case '/chat-history':\n      return getMockHealthData().chat_history;\n    default:\n      throw new Error(`Unknown endpoint: ${endpoint}`);\n  }\n};\n\n// Use mock API in development if backend is not available\nexport const useMockAPI = process.env.NODE_ENV === 'development' && !process.env.REACT_APP_API_URL;\n\n// Export the appropriate API function\nexport const api = useMockAPI ? mockApiCall : apiCall;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","apiCall","endpoint","options","url","token","authData","localStorage","getItem","parsed","JSON","parse","access_token","e","console","log","defaultOptions","headers","response","fetch","ok","errorData","json","catch","Error","error","status","checkHealth","getHealthData","uploadDocument","documentText","method","body","stringify","text","sendChatMessage","message","syncCalendar","getChatHistory","getHealthInsights","mockApiCall","Promise","resolve","setTimeout","getMockHealthData","analysis","medications","name","dosage","frequency","duration","instructions","refill_date","appointments","health_metrics","recommendations","document_id","Date","now","chat_id","events_created","calendar_result","success","chat_history","useMockAPI","NODE_ENV","api"],"sources":["/Users/venkatkutti/heckathon/healthsync/healthsync/frontend/src/utils/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001';\n\n// Helper function for API calls\nconst apiCall = async (endpoint, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  \n  // Get authentication token from Supabase\n  let token = null;\n  try {\n    const authData = localStorage.getItem('sb-dswegujgkgcbszblpmcl-auth-token');\n    if (authData) {\n      const parsed = JSON.parse(authData);\n      token = parsed.access_token;\n    }\n  } catch (e) {\n    console.log('No auth token found');\n  }\n  \n  const defaultOptions = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...(token && { 'Authorization': `Bearer ${token}` }),\n    },\n    ...options,\n  };\n\n  try {\n    const response = await fetch(url, defaultOptions);\n    \n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error(`API Error (${endpoint}):`, error);\n    // Always throw the error instead of using mock data\n    throw error;\n  }\n};\n\n// Health check\nexport const checkHealth = async () => {\n  return apiCall('/health');\n};\n\n// Get all health data\nexport const getHealthData = async () => {\n  return apiCall('/health-data');\n};\n\n// Upload and analyze document\nexport const uploadDocument = async (documentText) => {\n  return apiCall('/upload', {\n    method: 'POST',\n    body: JSON.stringify({ text: documentText }),\n  });\n};\n\n// Send chat message\nexport const sendChatMessage = async (message) => {\n  return apiCall('/chat', {\n    method: 'POST',\n    body: JSON.stringify({ message }),\n  });\n};\n\n// Sync to calendar\nexport const syncCalendar = async () => {\n  return apiCall('/sync-calendar', {\n    method: 'POST',\n  });\n};\n\n// Get chat history\nexport const getChatHistory = async () => {\n  return apiCall('/chat-history');\n};\n\n// Get health insights\nexport const getHealthInsights = async () => {\n  return apiCall('/health-insights', {\n    method: 'POST',\n  });\n};\n\n// No mock data - always use real Gemini AI analysis\n\n// Mock API responses for development\nexport const mockApiCall = async (endpoint, options = {}) => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 500));\n  \n  switch (endpoint) {\n    case '/health':\n      return { status: 'healthy', message: 'HealthSync AI is running!' };\n    \n    case '/health-data':\n      return getMockHealthData();\n    \n    case '/upload':\n      const { text } = JSON.parse(options.body);\n      return {\n        message: 'Document analyzed successfully',\n        analysis: {\n          medications: [\n            {\n              name: \"Sample Medication\",\n              dosage: \"100mg\",\n              frequency: \"once daily\",\n              duration: \"ongoing\",\n              instructions: \"Take as directed\",\n              refill_date: \"2024-09-30\"\n            }\n          ],\n          appointments: [],\n          health_metrics: [],\n          recommendations: [\"Follow up with your doctor\", \"Monitor symptoms\"]\n        },\n        document_id: Date.now()\n      };\n    \n    case '/chat':\n      const { message } = JSON.parse(options.body);\n      return {\n        response: `This is a mock response to: \"${message}\". In the real application, this would be generated by Google Gemini AI based on your health profile.`,\n        chat_id: Date.now()\n      };\n    \n    case '/sync-calendar':\n      return {\n        message: 'Calendar synced successfully',\n        events_created: 7,\n        calendar_result: { success: true }\n      };\n    \n    case '/chat-history':\n      return getMockHealthData().chat_history;\n    \n    default:\n      throw new Error(`Unknown endpoint: ${endpoint}`);\n  }\n};\n\n// Use mock API in development if backend is not available\nexport const useMockAPI = process.env.NODE_ENV === 'development' && !process.env.REACT_APP_API_URL;\n\n// Export the appropriate API function\nexport const api = useMockAPI ? mockApiCall : apiCall;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}