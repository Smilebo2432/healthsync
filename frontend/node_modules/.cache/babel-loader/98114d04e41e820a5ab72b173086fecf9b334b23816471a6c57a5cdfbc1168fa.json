{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\nif (!supabaseUrl || !supabaseAnonKey) {\n  console.error('Missing Supabase environment variables');\n}\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Auth helper functions\nexport const auth = {\n  // Sign up with email and password\n  signUp: async (email, password) => {\n    const {\n      data,\n      error\n    } = await supabase.auth.signUp({\n      email,\n      password\n    });\n    return {\n      data,\n      error\n    };\n  },\n  // Sign in with email and password\n  signIn: async (email, password) => {\n    const {\n      data,\n      error\n    } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n    return {\n      data,\n      error\n    };\n  },\n  // Sign out\n  signOut: async () => {\n    const {\n      error\n    } = await supabase.auth.signOut();\n    return {\n      error\n    };\n  },\n  // Get current user\n  getCurrentUser: async () => {\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    return user;\n  },\n  // Listen to auth state changes\n  onAuthStateChange: callback => {\n    return supabase.auth.onAuthStateChange(callback);\n  },\n  // Reset password\n  resetPassword: async email => {\n    const {\n      data,\n      error\n    } = await supabase.auth.resetPasswordForEmail(email, {\n      redirectTo: `${window.location.origin}/reset-password`\n    });\n    return {\n      data,\n      error\n    };\n  },\n  // Update password\n  updatePassword: async password => {\n    const {\n      data,\n      error\n    } = await supabase.auth.updateUser({\n      password: password\n    });\n    return {\n      data,\n      error\n    };\n  }\n};\n\n// Database helper functions\nexport const db = {\n  // Get user's health data\n  getHealthData: async userId => {\n    const {\n      data,\n      error\n    } = await supabase.from('health_data').select('*').eq('user_id', userId).single();\n    return {\n      data,\n      error\n    };\n  },\n  // Update user's health data\n  updateHealthData: async (userId, healthData) => {\n    const {\n      data,\n      error\n    } = await supabase.from('health_data').upsert({\n      user_id: userId,\n      ...healthData,\n      updated_at: new Date().toISOString()\n    });\n    return {\n      data,\n      error\n    };\n  },\n  // Get user's documents\n  getDocuments: async userId => {\n    const {\n      data,\n      error\n    } = await supabase.from('documents').select('*').eq('user_id', userId).order('created_at', {\n      ascending: false\n    });\n    return {\n      data,\n      error\n    };\n  },\n  // Add new document\n  addDocument: async (userId, document) => {\n    const {\n      data,\n      error\n    } = await supabase.from('documents').insert({\n      user_id: userId,\n      ...document,\n      created_at: new Date().toISOString()\n    });\n    return {\n      data,\n      error\n    };\n  },\n  // Get chat history\n  getChatHistory: async userId => {\n    const {\n      data,\n      error\n    } = await supabase.from('chat_history').select('*').eq('user_id', userId).order('created_at', {\n      ascending: false\n    }).limit(50);\n    return {\n      data,\n      error\n    };\n  },\n  // Add chat message\n  addChatMessage: async (userId, message) => {\n    const {\n      data,\n      error\n    } = await supabase.from('chat_history').insert({\n      user_id: userId,\n      ...message,\n      created_at: new Date().toISOString()\n    });\n    return {\n      data,\n      error\n    };\n  }\n};","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","console","error","supabase","auth","signUp","email","password","data","signIn","signInWithPassword","signOut","getCurrentUser","user","getUser","onAuthStateChange","callback","resetPassword","resetPasswordForEmail","redirectTo","window","location","origin","updatePassword","updateUser","db","getHealthData","userId","from","select","eq","single","updateHealthData","healthData","upsert","user_id","updated_at","Date","toISOString","getDocuments","order","ascending","addDocument","document","insert","created_at","getChatHistory","limit","addChatMessage","message"],"sources":["/Users/venkatkutti/heckathon/healthsync/healthsync/frontend/src/config/supabase.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  console.error('Missing Supabase environment variables')\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\n// Auth helper functions\nexport const auth = {\n  // Sign up with email and password\n  signUp: async (email, password) => {\n    const { data, error } = await supabase.auth.signUp({\n      email,\n      password,\n    })\n    return { data, error }\n  },\n\n  // Sign in with email and password\n  signIn: async (email, password) => {\n    const { data, error } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    })\n    return { data, error }\n  },\n\n  // Sign out\n  signOut: async () => {\n    const { error } = await supabase.auth.signOut()\n    return { error }\n  },\n\n  // Get current user\n  getCurrentUser: async () => {\n    const { data: { user } } = await supabase.auth.getUser()\n    return user\n  },\n\n  // Listen to auth state changes\n  onAuthStateChange: (callback) => {\n    return supabase.auth.onAuthStateChange(callback)\n  },\n\n  // Reset password\n  resetPassword: async (email) => {\n    const { data, error } = await supabase.auth.resetPasswordForEmail(email, {\n      redirectTo: `${window.location.origin}/reset-password`,\n    })\n    return { data, error }\n  },\n\n  // Update password\n  updatePassword: async (password) => {\n    const { data, error } = await supabase.auth.updateUser({\n      password: password\n    })\n    return { data, error }\n  }\n}\n\n// Database helper functions\nexport const db = {\n  // Get user's health data\n  getHealthData: async (userId) => {\n    const { data, error } = await supabase\n      .from('health_data')\n      .select('*')\n      .eq('user_id', userId)\n      .single()\n    return { data, error }\n  },\n\n  // Update user's health data\n  updateHealthData: async (userId, healthData) => {\n    const { data, error } = await supabase\n      .from('health_data')\n      .upsert({\n        user_id: userId,\n        ...healthData,\n        updated_at: new Date().toISOString()\n      })\n    return { data, error }\n  },\n\n  // Get user's documents\n  getDocuments: async (userId) => {\n    const { data, error } = await supabase\n      .from('documents')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false })\n    return { data, error }\n  },\n\n  // Add new document\n  addDocument: async (userId, document) => {\n    const { data, error } = await supabase\n      .from('documents')\n      .insert({\n        user_id: userId,\n        ...document,\n        created_at: new Date().toISOString()\n      })\n    return { data, error }\n  },\n\n  // Get chat history\n  getChatHistory: async (userId) => {\n    const { data, error } = await supabase\n      .from('chat_history')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false })\n      .limit(50)\n    return { data, error }\n  },\n\n  // Add chat message\n  addChatMessage: async (userId, message) => {\n    const { data, error } = await supabase\n      .from('chat_history')\n      .insert({\n        user_id: userId,\n        ...message,\n        created_at: new Date().toISOString()\n      })\n    return { data, error }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}