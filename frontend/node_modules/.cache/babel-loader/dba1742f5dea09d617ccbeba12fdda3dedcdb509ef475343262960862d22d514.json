{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://10.10.9.87:5001';\n\n// Helper function for API calls\nconst apiCall = async (endpoint, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n\n  // Get authentication token from Supabase\n  let token = null;\n  try {\n    const authData = localStorage.getItem('sb-dswegujgkgcbszblpmcl-auth-token');\n    if (authData) {\n      const parsed = JSON.parse(authData);\n      token = parsed.access_token;\n    }\n  } catch (e) {\n    console.log('No auth token found');\n  }\n  const defaultOptions = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...(token && {\n        'Authorization': `Bearer ${token}`\n      })\n    },\n    ...options\n  };\n  try {\n    const response = await fetch(url, defaultOptions);\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`API Error (${endpoint}):`, error);\n    // Always throw the error instead of using mock data\n    throw error;\n  }\n};\n\n// Health check\nexport const checkHealth = async () => {\n  return apiCall('/health');\n};\n\n// Get all health data\n\nexport const getHealthData = async () => {\n  return apiCall('/health-data');\n};\n\n// Upload and analyze document\nexport const uploadDocument = async documentText => {\n  return apiCall('/upload', {\n    method: 'POST',\n    body: JSON.stringify({\n      text: documentText\n    })\n  });\n};\n\n// Send chat message\nexport const sendChatMessage = async message => {\n  return apiCall('/chat', {\n    method: 'POST',\n    body: JSON.stringify({\n      message\n    })\n  });\n};\n\n// Sync to calendar\nexport const syncCalendar = async () => {\n  return apiCall('/sync-calendar', {\n    method: 'POST'\n  });\n};\n\n// Get chat history\nexport const getChatHistory = async () => {\n  return apiCall('/chat-history');\n};\n\n// Get health insights\nexport const getHealthInsights = async () => {\n  return apiCall('/health-insights', {\n    method: 'POST'\n  });\n};\n\n// No mock data - always use real Gemini AI analysis\n\n// No mock API - always use real Gemini AI analysis\n\n// Export the API function\nexport const api = apiCall;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","apiCall","endpoint","options","url","token","authData","localStorage","getItem","parsed","JSON","parse","access_token","e","console","log","defaultOptions","headers","response","fetch","ok","errorData","json","catch","Error","error","status","checkHealth","getHealthData","uploadDocument","documentText","method","body","stringify","text","sendChatMessage","message","syncCalendar","getChatHistory","getHealthInsights","api"],"sources":["/Users/venkatkutti/heckathon/healthsync/healthsync/frontend/src/utils/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://10.10.9.87:5001';\n\n// Helper function for API calls\nconst apiCall = async (endpoint, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  \n  // Get authentication token from Supabase\n  let token = null;\n  try {\n    const authData = localStorage.getItem('sb-dswegujgkgcbszblpmcl-auth-token');\n    if (authData) {\n      const parsed = JSON.parse(authData);\n      token = parsed.access_token;\n    }\n  } catch (e) {\n    console.log('No auth token found');\n  }\n  \n  const defaultOptions = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...(token && { 'Authorization': `Bearer ${token}` }),\n    },\n    ...options,\n  };\n\n  try {\n    const response = await fetch(url, defaultOptions);\n    \n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error(`API Error (${endpoint}):`, error);\n    // Always throw the error instead of using mock data\n    throw error;\n  }\n};\n\n// Health check\nexport const checkHealth = async () => {\n  return apiCall('/health');\n};\n\n// Get all health data\n\nexport const getHealthData = async () => {\n  return apiCall('/health-data');\n};\n\n// Upload and analyze document\nexport const uploadDocument = async (documentText) => {\n  return apiCall('/upload', {\n    method: 'POST',\n    body: JSON.stringify({ text: documentText }),\n  });\n};\n\n// Send chat message\nexport const sendChatMessage = async (message) => {\n  return apiCall('/chat', {\n    method: 'POST',\n    body: JSON.stringify({ message }),\n  });\n};\n\n// Sync to calendar\nexport const syncCalendar = async () => {\n  return apiCall('/sync-calendar', {\n    method: 'POST',\n  });\n};\n\n// Get chat history\nexport const getChatHistory = async () => {\n  return apiCall('/chat-history');\n};\n\n// Get health insights\nexport const getHealthInsights = async () => {\n  return apiCall('/health-insights', {\n    method: 'POST',\n  });\n};\n\n// No mock data - always use real Gemini AI analysis\n\n// No mock API - always use real Gemini AI analysis\n\n// Export the API function\nexport const api = apiCall;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}